//	stationaryorbit.core:/typetraitsbase
//	Copyright 2020-2021 zawa-ch.
//	GPLv3 (or later) license
//
//	This program is free software: you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation, either version 3 of the License, or
//	any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//	See the GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program.
//	If not, see <http://www.gnu.org/licenses/>.
//
#include <cstddef>
#include <cstdint>
#include <array>
#include "stationaryorbit/core/typetraitsbase.hpp"
using namespace zawa_ch::StationaryOrbit;

//	コンパイル時型特性アサーション

static_assert(TypeTraitsBase::has_substitution<uint8_t, uint8_t>, "型 uint8_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<uint8_t, uint8_t>, "型 uint8_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<uint8_t, uint8_t>, "型 uint8_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<uint8_t, uint8_t>, "型 uint8_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<uint8_t, uint8_t>, "型 uint8_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<uint8_t, uint8_t>, "型 uint8_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<uint8_t, uint8_t>, "型 uint8_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<uint8_t, uint8_t>, "型 uint8_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<uint8_t, uint8_t>, "型 uint8_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<uint8_t, uint8_t>, "型 uint8_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<uint8_t, uint8_t>, "型 uint8_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<uint8_t>, "型 uint8_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<uint8_t>, "型 uint8_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<uint8_t>, "型 uint8_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<uint8_t>, "型 uint8_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<uint8_t>, "型 uint8_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<uint8_t>, "型 uint8_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<uint8_t, uint8_t>, "型 uint8_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<uint8_t, uint8_t>, "型 uint8_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<uint8_t, uint8_t>, "型 uint8_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<uint8_t, uint8_t>, "型 uint8_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<uint8_t, uint8_t>, "型 uint8_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<uint8_t>, "型 uint8_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<uint8_t, uint8_t>, "型 uint8_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<uint8_t, uint8_t>, "型 uint8_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<uint8_t, uint8_t>, "型 uint8_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<uint8_t, int>, "型 uint8_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<uint8_t, int>, "型 uint8_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<uint8_t>, "型 uint8_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<uint8_t, uint8_t>, "型 uint8_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<uint8_t, uint8_t>, "型 uint8_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<uint8_t, uint8_t>, "型 uint8_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<uint8_t, uint8_t>, "型 uint8_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<uint8_t, uint8_t>, "型 uint8_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<uint8_t, uint8_t>, "型 uint8_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<uint8_t, uint8_t>, "型 uint8_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<uint8_t, uint8_t>, "型 uint8_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<uint8_t, uint8_t>, "型 uint8_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<uint8_t>, "型 uint8_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<uint8_t>, "型 uint8_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<uint16_t, uint16_t>, "型 uint16_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<uint16_t, uint16_t>, "型 uint16_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<uint16_t, uint16_t>, "型 uint16_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<uint16_t, uint16_t>, "型 uint16_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<uint16_t, uint16_t>, "型 uint16_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<uint16_t, uint16_t>, "型 uint16_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<uint16_t, uint16_t>, "型 uint16_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<uint16_t, uint16_t>, "型 uint16_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<uint16_t, uint16_t>, "型 uint16_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<uint16_t, uint16_t>, "型 uint16_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<uint16_t, uint16_t>, "型 uint16_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<uint16_t>, "型 uint16_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<uint16_t>, "型 uint16_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<uint16_t>, "型 uint16_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<uint16_t>, "型 uint16_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<uint16_t>, "型 uint16_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<uint16_t>, "型 uint16_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<uint16_t, uint16_t>, "型 uint16_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<uint16_t, uint16_t>, "型 uint16_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<uint16_t, uint16_t>, "型 uint16_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<uint16_t, uint16_t>, "型 uint16_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<uint16_t, uint16_t>, "型 uint16_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<uint16_t>, "型 uint16_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<uint16_t, uint16_t>, "型 uint16_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<uint16_t, uint16_t>, "型 uint16_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<uint16_t, uint16_t>, "型 uint16_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<uint16_t, int>, "型 uint16_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<uint16_t, int>, "型 uint16_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<uint16_t>, "型 uint16_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<uint16_t, uint16_t>, "型 uint16_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<uint16_t, uint16_t>, "型 uint16_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<uint16_t, uint16_t>, "型 uint16_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<uint16_t, uint16_t>, "型 uint16_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<uint16_t, uint16_t>, "型 uint16_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<uint16_t, uint16_t>, "型 uint16_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<uint16_t, uint16_t>, "型 uint16_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<uint16_t, uint16_t>, "型 uint16_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<uint16_t, uint16_t>, "型 uint16_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<uint16_t>, "型 uint16_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<uint16_t>, "型 uint16_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<uint32_t, uint32_t>, "型 uint32_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<uint32_t, uint32_t>, "型 uint32_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<uint32_t, uint32_t>, "型 uint32_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<uint32_t, uint32_t>, "型 uint32_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<uint32_t, uint32_t>, "型 uint32_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<uint32_t, uint32_t>, "型 uint32_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<uint32_t, uint32_t>, "型 uint32_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<uint32_t, uint32_t>, "型 uint32_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<uint32_t, uint32_t>, "型 uint32_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<uint32_t, uint32_t>, "型 uint32_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<uint32_t, uint32_t>, "型 uint32_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<uint32_t>, "型 uint32_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<uint32_t>, "型 uint32_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<uint32_t>, "型 uint32_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<uint32_t>, "型 uint32_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<uint32_t>, "型 uint32_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<uint32_t>, "型 uint32_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<uint32_t, uint32_t>, "型 uint32_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<uint32_t, uint32_t>, "型 uint32_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<uint32_t, uint32_t>, "型 uint32_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<uint32_t, uint32_t>, "型 uint32_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<uint32_t, uint32_t>, "型 uint32_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<uint32_t>, "型 uint32_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<uint32_t, uint32_t>, "型 uint32_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<uint32_t, uint32_t>, "型 uint32_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<uint32_t, uint32_t>, "型 uint32_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<uint32_t, int>, "型 uint32_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<uint32_t, int>, "型 uint32_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<uint32_t>, "型 uint32_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<uint32_t, uint32_t>, "型 uint32_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<uint32_t, uint32_t>, "型 uint32_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<uint32_t, uint32_t>, "型 uint32_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<uint32_t, uint32_t>, "型 uint32_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<uint32_t, uint32_t>, "型 uint32_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<uint32_t, uint32_t>, "型 uint32_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<uint32_t, uint32_t>, "型 uint32_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<uint32_t, uint32_t>, "型 uint32_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<uint32_t, uint32_t>, "型 uint32_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<uint32_t>, "型 uint32_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<uint32_t>, "型 uint32_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<uint64_t, uint64_t>, "型 uint64_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<uint64_t, uint64_t>, "型 uint64_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<uint64_t, uint64_t>, "型 uint64_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<uint64_t, uint64_t>, "型 uint64_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<uint64_t, uint64_t>, "型 uint64_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<uint64_t, uint64_t>, "型 uint64_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<uint64_t, uint64_t>, "型 uint64_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<uint64_t, uint64_t>, "型 uint64_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<uint64_t, uint64_t>, "型 uint64_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<uint64_t, uint64_t>, "型 uint64_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<uint64_t, uint64_t>, "型 uint64_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<uint64_t>, "型 uint64_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<uint64_t>, "型 uint64_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<uint64_t>, "型 uint64_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<uint64_t>, "型 uint64_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<uint64_t>, "型 uint64_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<uint64_t>, "型 uint64_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<uint64_t, uint64_t>, "型 uint64_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<uint64_t, uint64_t>, "型 uint64_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<uint64_t, uint64_t>, "型 uint64_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<uint64_t, uint64_t>, "型 uint64_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<uint64_t, uint64_t>, "型 uint64_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<uint64_t>, "型 uint64_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<uint64_t, uint64_t>, "型 uint64_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<uint64_t, uint64_t>, "型 uint64_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<uint64_t, uint64_t>, "型 uint64_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<uint64_t, int>, "型 uint64_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<uint64_t, int>, "型 uint64_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<uint64_t>, "型 uint64_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<uint64_t, uint64_t>, "型 uint64_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<uint64_t, uint64_t>, "型 uint64_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<uint64_t, uint64_t>, "型 uint64_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<uint64_t, uint64_t>, "型 uint64_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<uint64_t, uint64_t>, "型 uint64_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<uint64_t, uint64_t>, "型 uint64_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<uint64_t, uint64_t>, "型 uint64_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<uint64_t, uint64_t>, "型 uint64_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<uint64_t, uint64_t>, "型 uint64_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<uint64_t>, "型 uint64_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<uint64_t>, "型 uint64_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<int8_t, int8_t>, "型 int8_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<int8_t, int8_t>, "型 int8_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<int8_t, int8_t>, "型 int8_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<int8_t, int8_t>, "型 int8_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<int8_t, int8_t>, "型 int8_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<int8_t, int8_t>, "型 int8_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<int8_t, int8_t>, "型 int8_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<int8_t, int8_t>, "型 int8_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<int8_t, int8_t>, "型 int8_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<int8_t, int8_t>, "型 int8_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<int8_t, int8_t>, "型 int8_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<int8_t>, "型 int8_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<int8_t>, "型 int8_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<int8_t>, "型 int8_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<int8_t>, "型 int8_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<int8_t>, "型 int8_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<int8_t>, "型 int8_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<int8_t, int8_t>, "型 int8_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<int8_t, int8_t>, "型 int8_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<int8_t, int8_t>, "型 int8_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<int8_t, int8_t>, "型 int8_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<int8_t, int8_t>, "型 int8_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<int8_t>, "型 int8_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<int8_t, int8_t>, "型 int8_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<int8_t, int8_t>, "型 int8_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<int8_t, int8_t>, "型 int8_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<int8_t, int>, "型 int8_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<int8_t, int>, "型 int8_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<int8_t>, "型 int8_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<int8_t, int8_t>, "型 int8_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<int8_t, int8_t>, "型 int8_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<int8_t, int8_t>, "型 int8_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<int8_t, int8_t>, "型 int8_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<int8_t, int8_t>, "型 int8_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<int8_t, int8_t>, "型 int8_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<int8_t, int8_t>, "型 int8_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<int8_t, int8_t>, "型 int8_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<int8_t, int8_t>, "型 int8_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<int8_t>, "型 int8_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<int8_t>, "型 int8_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<int16_t, int16_t>, "型 int16_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<int16_t, int16_t>, "型 int16_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<int16_t, int16_t>, "型 int16_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<int16_t, int16_t>, "型 int16_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<int16_t, int16_t>, "型 int16_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<int16_t, int16_t>, "型 int16_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<int16_t, int16_t>, "型 int16_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<int16_t, int16_t>, "型 int16_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<int16_t, int16_t>, "型 int16_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<int16_t, int16_t>, "型 int16_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<int16_t, int16_t>, "型 int16_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<int16_t>, "型 int16_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<int16_t>, "型 int16_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<int16_t>, "型 int16_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<int16_t>, "型 int16_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<int16_t>, "型 int16_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<int16_t>, "型 int16_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<int16_t, int16_t>, "型 int16_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<int16_t, int16_t>, "型 int16_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<int16_t, int16_t>, "型 int16_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<int16_t, int16_t>, "型 int16_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<int16_t, int16_t>, "型 int16_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<int16_t>, "型 int16_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<int16_t, int16_t>, "型 int16_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<int16_t, int16_t>, "型 int16_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<int16_t, int16_t>, "型 int16_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<int16_t, int>, "型 int16_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<int16_t, int>, "型 int16_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<int16_t>, "型 int16_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<int16_t, int16_t>, "型 int16_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<int16_t, int16_t>, "型 int16_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<int16_t, int16_t>, "型 int16_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<int16_t, int16_t>, "型 int16_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<int16_t, int16_t>, "型 int16_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<int16_t, int16_t>, "型 int16_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<int16_t, int16_t>, "型 int16_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<int16_t, int16_t>, "型 int16_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<int16_t, int16_t>, "型 int16_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<int16_t>, "型 int16_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<int16_t>, "型 int16_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<int32_t, int32_t>, "型 int32_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<int32_t, int32_t>, "型 int32_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<int32_t, int32_t>, "型 int32_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<int32_t, int32_t>, "型 int32_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<int32_t, int32_t>, "型 int32_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<int32_t, int32_t>, "型 int32_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<int32_t, int32_t>, "型 int32_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<int32_t, int32_t>, "型 int32_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<int32_t, int32_t>, "型 int32_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<int32_t, int32_t>, "型 int32_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<int32_t, int32_t>, "型 int32_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<int32_t>, "型 int32_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<int32_t>, "型 int32_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<int32_t>, "型 int32_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<int32_t>, "型 int32_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<int32_t>, "型 int32_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<int32_t>, "型 int32_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<int32_t, int32_t>, "型 int32_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<int32_t, int32_t>, "型 int32_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<int32_t, int32_t>, "型 int32_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<int32_t, int32_t>, "型 int32_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<int32_t, int32_t>, "型 int32_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<int32_t>, "型 int32_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<int32_t, int32_t>, "型 int32_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<int32_t, int32_t>, "型 int32_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<int32_t, int32_t>, "型 int32_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<int32_t, int>, "型 int32_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<int32_t, int>, "型 int32_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<int32_t>, "型 int32_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<int32_t, int32_t>, "型 int32_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<int32_t, int32_t>, "型 int32_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<int32_t, int32_t>, "型 int32_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<int32_t, int32_t>, "型 int32_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<int32_t, int32_t>, "型 int32_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<int32_t, int32_t>, "型 int32_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<int32_t, int32_t>, "型 int32_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<int32_t, int32_t>, "型 int32_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<int32_t, int32_t>, "型 int32_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<int32_t>, "型 int32_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<int32_t>, "型 int32_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<int64_t, int64_t>, "型 int64_t は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<int64_t, int64_t>, "型 int64_t は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<int64_t, int64_t>, "型 int64_t は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<int64_t, int64_t>, "型 int64_t は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<int64_t, int64_t>, "型 int64_t は has_substitution_divide を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_modulate<int64_t, int64_t>, "型 int64_t は has_substitution_modulate を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_and<int64_t, int64_t>, "型 int64_t は has_substitution_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_or<int64_t, int64_t>, "型 int64_t は has_substitution_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_arithmetic_xor<int64_t, int64_t>, "型 int64_t は has_substitution_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_lshift<int64_t, int64_t>, "型 int64_t は has_substitution_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_rshift<int64_t, int64_t>, "型 int64_t は has_substitution_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_preincrement<int64_t>, "型 int64_t は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<int64_t>, "型 int64_t は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<int64_t>, "型 int64_t は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<int64_t>, "型 int64_t は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<int64_t>, "型 int64_t は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<int64_t>, "型 int64_t は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<int64_t, int64_t>, "型 int64_t は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<int64_t, int64_t>, "型 int64_t は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<int64_t, int64_t>, "型 int64_t は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<int64_t, int64_t>, "型 int64_t は has_division を満たしませんでした。");
static_assert(TypeTraitsBase::has_modulation<int64_t, int64_t>, "型 int64_t は has_modulation を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_not<int64_t>, "型 int64_t は has_arithmetic_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_and<int64_t, int64_t>, "型 int64_t は has_arithmetic_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_or<int64_t, int64_t>, "型 int64_t は has_arithmetic_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_arithmetic_xor<int64_t, int64_t>, "型 int64_t は has_arithmetic_xor を満たしませんでした。");
static_assert(TypeTraitsBase::has_lshift<int64_t, int>, "型 int64_t は has_lshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_rshift<int64_t, int>, "型 int64_t は has_rshift を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_not<int64_t>, "型 int64_t は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<int64_t, int64_t>, "型 int64_t は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<int64_t, int64_t>, "型 int64_t は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<int64_t, int64_t>, "型 int64_t は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<int64_t, int64_t>, "型 int64_t は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<int64_t, int64_t>, "型 int64_t は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<int64_t, int64_t>, "型 int64_t は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<int64_t, int64_t>, "型 int64_t は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<int64_t, int64_t>, "型 int64_t は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<int64_t, int64_t>, "型 int64_t は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<int64_t>, "型 int64_t は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<int64_t>, "型 int64_t は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<float, float>, "型 float は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<float, float>, "型 float は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<float, float>, "型 float は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<float, float>, "型 float は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<float, float>, "型 float は has_substitution_divide を満たしませんでした。");
static_assert(!TypeTraitsBase::has_substitution_modulate<float, float>, "型 float は has_substitution_modulate を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_and<float, float>, "型 float は has_substitution_arithmetic_and を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_or<float, float>, "型 float は has_substitution_arithmetic_or を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_xor<float, float>, "型 float は has_substitution_arithmetic_xor を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_lshift<float, float>, "型 float は has_substitution_lshift を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_rshift<float, float>, "型 float は has_substitution_rshift を満たしました。");
static_assert(TypeTraitsBase::has_preincrement<float>, "型 float は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<float>, "型 float は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<float>, "型 float は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<float>, "型 float は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<float>, "型 float は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<float>, "型 float は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<float, float>, "型 float は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<float, float>, "型 float は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<float, float>, "型 float は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<float, float>, "型 float は has_division を満たしませんでした。");
static_assert(!TypeTraitsBase::has_modulation<float, float>, "型 float は has_modulation を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_not<float>, "型 float は has_arithmetic_not を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_and<float, float>, "型 float は has_arithmetic_and を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_or<float, float>, "型 float は has_arithmetic_or を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_xor<float, float>, "型 float は has_arithmetic_xor を満たしました。");
static_assert(!TypeTraitsBase::has_lshift<float, int>, "型 float は has_lshift を満たしました。");
static_assert(!TypeTraitsBase::has_rshift<float, int>, "型 float は has_rshift を満たしました。");
static_assert(TypeTraitsBase::has_logical_not<float>, "型 float は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<float, float>, "型 float は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<float, float>, "型 float は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<float, float>, "型 float は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<float, float>, "型 float は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<float, float>, "型 float は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<float, float>, "型 float は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<float, float>, "型 float は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<float, float>, "型 float は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<float, float>, "型 float は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<float>, "型 float は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<float>, "型 float は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::has_substitution<double, double>, "型 double は has_substitution を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_add<double, double>, "型 double は has_substitution_add を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_subtract<double, double>, "型 double は has_substitution_subtract を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_multiply<double, double>, "型 double は has_substitution_multiply を満たしませんでした。");
static_assert(TypeTraitsBase::has_substitution_divide<double, double>, "型 double は has_substitution_divide を満たしませんでした。");
static_assert(!TypeTraitsBase::has_substitution_modulate<double, double>, "型 double は has_substitution_modulate を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_and<double, double>, "型 double は has_substitution_arithmetic_and を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_or<double, double>, "型 double は has_substitution_arithmetic_or を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_arithmetic_xor<double, double>, "型 double は has_substitution_arithmetic_xor を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_lshift<double, double>, "型 double は has_substitution_lshift を満たしました。");
static_assert(!TypeTraitsBase::has_substitution_rshift<double, double>, "型 double は has_substitution_rshift を満たしました。");
static_assert(TypeTraitsBase::has_preincrement<double>, "型 double は has_preincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_predecrement<double>, "型 double は has_predecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postincrement<double>, "型 double は has_postincrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_postdecrement<double>, "型 double は has_postdecrement を満たしませんでした。");
static_assert(TypeTraitsBase::has_promotion<double>, "型 double は has_promotion を満たしませんでした。");
static_assert(TypeTraitsBase::has_inverse<double>, "型 double は has_inverse を満たしませんでした。");
static_assert(TypeTraitsBase::has_addition<double, double>, "型 double は has_addition を満たしませんでした。");
static_assert(TypeTraitsBase::has_subtraction<double, double>, "型 double は has_subtraction を満たしませんでした。");
static_assert(TypeTraitsBase::has_multiplication<double, double>, "型 double は has_multiplication を満たしませんでした。");
static_assert(TypeTraitsBase::has_division<double, double>, "型 double は has_division を満たしませんでした。");
static_assert(!TypeTraitsBase::has_modulation<double, double>, "型 double は has_modulation を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_not<double>, "型 double は has_arithmetic_not を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_and<double, double>, "型 double は has_arithmetic_and を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_or<double, double>, "型 double は has_arithmetic_or を満たしました。");
static_assert(!TypeTraitsBase::has_arithmetic_xor<double, double>, "型 double は has_arithmetic_xor を満たしました。");
static_assert(!TypeTraitsBase::has_lshift<double, int>, "型 double は has_lshift を満たしました。");
static_assert(!TypeTraitsBase::has_rshift<double, int>, "型 double は has_rshift を満たしました。");
static_assert(TypeTraitsBase::has_logical_not<double>, "型 double は has_logical_not を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_and<double, double>, "型 double は has_logical_and を満たしませんでした。");
static_assert(TypeTraitsBase::has_logical_or<double, double>, "型 double は has_logical_or を満たしませんでした。");
static_assert(TypeTraitsBase::has_equal<double, double>, "型 double は has_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_not_equal<double, double>, "型 double は has_not_equal を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_larger<double, double>, "型 double は has_compare_larger を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_smaller<double, double>, "型 double は has_compare_smaller を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_least<double, double>, "型 double は has_compare_least を満たしませんでした。");
static_assert(TypeTraitsBase::has_compare_most<double, double>, "型 double は has_compare_most を満たしませんでした。");
static_assert(!TypeTraitsBase::has_subscript<double, double>, "型 double は has_subscript を満たしました。");
static_assert(!TypeTraitsBase::has_dereference<double>, "型 double は has_dereference を満たしました。");
static_assert(TypeTraitsBase::has_reference<double>, "型 double は has_reference を満たしませんでした。");

static_assert(TypeTraitsBase::subscript_result_is_convertible<std::array<uint8_t, 20>, size_t, uint8_t>, "std::array<uint8_t, 20> に operator[](size_t) -> uint8_t がありません");
static_assert(TypeTraitsBase::dereference_result_is_convertible<int*, int>, "int* に operator*() -> int がありません");
